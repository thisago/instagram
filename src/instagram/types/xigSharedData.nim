# Generated by https://github.com/jiro4989/nimjson

type
  # NilType* = ref object
  XigSharedData* = ref object
    config*: Config
    countryCode*: string
    # entryData*: EntryData
    isWhitelistedCrawlBot*: bool
    connectionQualityRating*: string
    # deploymentStage*: NilType
    platform*: string
    midPct*: float64
    # zeroData*: ZeroData
    # cacheSchemaVersion*: int64
    serverChecks*: ServerChecks
    toCache*: ToCache
    browserPushPubKey*: string
    encryption*: Encryption
    isDev*: bool
    isE2e*: bool
    # signalCollectionConfig*: SignalCollectionConfig
    # wwwRoutingConfig*: WwwRoutingConfig
    bundleVariant*: string
    # frontendEnv*: NilType
    # probablyHasApp*: NilType
    # rolloutHash*: NilType
  Config* = ref object
    csrfToken*: string
    viewer*: Viewer
    viewerId*: string
  Viewer* = ref object
    biography*: string
    businessAddressJson*: string #NilType
    businessContactMethod*: string
    businessEmail*: string #NilType
    businessPhoneNumber*: string #NilType
    canSeeOrganicInsights*: bool
    categoryName*: string
    externalUrl*: string #NilType
    fbid*: string
    fullName*: string
    hasPhoneNumber*: bool
    hasProfilePic*: bool
    hasTabbedInbox*: bool
    hideLikeAndViewCounts*: bool
    id*: string ## User ID
    isBusinessAccount*: bool
    isJoinedRecently*: bool
    isSupervisedUser*: bool
    guardianId*: string #NilType
    isPrivate*: bool
    isProfessionalAccount*: bool
    isSupervisionEnabled*: bool
    isUserInCanada*: bool
    profilePicUrl*: string
    profilePicUrlHd*: string
    shouldShowCategory*: bool
    shouldShowPublicContacts*: bool
    username*: string
    badgeCount*: string
  # EntryData* = ref object
  # ZeroData* = ref object
  ServerChecks* = ref object
    hfe*: bool
  ToCache* = ref object
    probablyHasApp*: bool
  Encryption* = ref object
    keyId*: string
    publicKey*: string
    version*: string
  # SignalCollectionConfig* = ref object
  #   bbs*: int64
  #   # ctw*: NilType
  #   dbs*: int64
  #   fd*: int64
  #   hbc*: Hbc
  #   i*: int64
  #   # rt*: NilType
  #   sbs*: int64
  #   sc*: Sc
  #   sid*: int64
  # Hbc* = ref object
  #   hbbi*: int64
  #   hbcbc*: int64
  #   hbi*: int64
  #   hbv*: string
  #   hbvbc*: int64
  # Sc* = ref object
  #   c*: seq[int]
  #   t*: int64
  # WwwRoutingConfig* = ref object
  #   frontendAndProxygenRoutes*: seq[FrontendAndProxygenRoutes]
  #   frontendOnlyRoutes*: seq[FrontendOnlyRoutes]
  #   proxygenRequestHandlerOnlyRoutes*: seq[ProxygenRequestHandlerOnlyRoutes]
  # FrontendAndProxygenRoutes* = ref object
  #   path*: string
  #   destination*: string
  # FrontendOnlyRoutes* = ref object
  #   path*: string
  #   destination*: string
  # ProxygenRequestHandlerOnlyRoutes* = ref object
  #   paths*: seq[string]
  #   destination*: string
  #   inVpnDogfooding*: bool
  #   inQe*: bool


using
  xigsc: XigSharedData

func csrfToken*(xigsc): string =
  if not xigsc.isNil:
    if not xigsc.config.isNil:
      result = xigsc.config.csrfToken

func userId*(xigsc): string =
  if not xigsc.isNil:
    if not xigsc.config.isNil:
      result = xigsc.config.viewer.id
      if not xigsc.config.viewer.isNil:
        result = xigsc.config.viewer.id
